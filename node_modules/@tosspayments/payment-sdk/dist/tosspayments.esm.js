function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

var cachedPromise = null;
function loadScript(src, namespace) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  // Return the cached Promise if it exists
  if (cachedPromise != null) {
    return cachedPromise;
  }

  var promise = new Promise(function (resolve, reject) {
    try {
      var onLoad = function onLoad() {
        if (getNamespace(namespace) != null) {
          resolve(getNamespace(namespace));
        } else {
          reject(new NamespaceNotAvailableError(namespace));
        }
      };

      var onError = function onError() {
        reject(new ScriptLoadFailedError(src));
      };

      // Handle SSR
      if (typeof window === 'undefined' || typeof document === 'undefined') {
        return resolve(null);
      } // If the SDK instance already exists in the global namespace, resolve with it


      if (getNamespace(namespace) != null) {
        return resolve(getNamespace(namespace));
      } // if script exists, but we are reloading due to an error,
      // reload script to trigger 'load' event


      var existingScript = document.querySelector("script[src=\"".concat(src, "\"]"));

      if (existingScript != null) {
        var _existingScript$paren;

        existingScript.removeEventListener('load', onLoad);
        existingScript.removeEventListener('error', onError);
        (_existingScript$paren = existingScript.parentElement) === null || _existingScript$paren === void 0 ? void 0 : _existingScript$paren.removeChild(existingScript);
      }

      var script = document.createElement('script');
      script.src = src;
      script.addEventListener('load', onLoad);
      script.addEventListener('error', onError);

      if (options.priority != null) {
        script.fetchPriority = options.priority;
      }

      document.head.appendChild(script);
    } catch (error) {
      reject(error);
      return;
    }
  }); // Reset the cache if the Promise is rejected

  cachedPromise = promise["catch"](function (error) {
    cachedPromise = null;
    return Promise.reject(error);
  });
  return cachedPromise;
}

function getNamespace(name) {
  return window[name];
}

var NamespaceNotAvailableError = /*#__PURE__*/function (_Error) {
  _inherits(NamespaceNotAvailableError, _Error);

  var _super = _createSuper(NamespaceNotAvailableError);

  function NamespaceNotAvailableError(namespace) {
    var _this;

    _classCallCheck(this, NamespaceNotAvailableError);

    _this = _super.call(this, "[TossPayments SDK] ".concat(namespace, " is not available"));
    _this.name = 'NamespaceNotAvailableError';
    return _this;
  }

  return NamespaceNotAvailableError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

var ScriptLoadFailedError = /*#__PURE__*/function (_Error2) {
  _inherits(ScriptLoadFailedError, _Error2);

  var _super2 = _createSuper(ScriptLoadFailedError);

  function ScriptLoadFailedError(src) {
    var _this2;

    _classCallCheck(this, ScriptLoadFailedError);

    _this2 = _super2.call(this, "[TossPayments SDK] Failed to load script: [".concat(src, "]"));
    _this2.name = 'ScriptLoadFailedError';
    return _this2;
  }

  return ScriptLoadFailedError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

var SCRIPT_URL = 'https://js.tosspayments.com/v1';

function loadTossPayments(clientKey) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$src = _ref.src,
      src = _ref$src === void 0 ? SCRIPT_URL : _ref$src;

  // SSR 지원
  if (typeof window === 'undefined') {
    return Promise.resolve({
      requestPayment: function requestPayment() {
        throw new Error("[TossPayments SDK] It looks like runtime is not from browser. This method is only executable on browser.");
      },
      requestBillingAuth: function requestBillingAuth() {
        throw new Error("[TossPayments SDK] It looks like runtime is not from browser. This method is only executable on browser.");
      },
      cancelPayment: function cancelPayment() {
        throw new Error("[TossPayments SDK] It looks like runtime is not from browser. This method is only executable on browser.");
      }
    });
  } // regenerator-runtime 의존성을 없애기 위해 `async` 키워드를 사용하지 않는다


  return loadScript(src, 'TossPayments').then(function (TossPayments) {
    return TossPayments(clientKey);
  });
}

function clearTossPayments() {
  var _script$parentElement;

  var script = document.querySelector("script[src=\"".concat(SCRIPT_URL, "\"]"));
  script === null || script === void 0 ? void 0 : (_script$parentElement = script.parentElement) === null || _script$parentElement === void 0 ? void 0 : _script$parentElement.removeChild(script);
  window.TossPayments = undefined;
}

export { clearTossPayments, loadTossPayments };
