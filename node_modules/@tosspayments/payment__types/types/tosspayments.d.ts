import BillingAuthRequest from './billing/BillingAuthRequest';
import { cancelPayment } from './payment/cancelPayment';
import { CardPaymentRequest, CardPaymentRequestWithoutUrl, CommonPaymentRequest, CommonPaymentRequestWithoutUrl, ForeignEasyPayPaymentRequest, ForeignEasyPayPaymentRequestWithoutUrl, PaymentMethodCode, PaymentMethodType, PaymentRequest, PaymentRequestWithoutUrl, PhonePaymentRequest, PhonePaymentRequestWithoutUrl, TranferPaymentRequest, TranferPaymentRequestWithoutUrl, VirtualAccountPaymentRequest, VirtualAccountPaymentRequestWithoutUrl } from './payment/PaymentRequest';
import { RequestPaymentResult } from './payment/requestPayment';
interface TossPaymentsOptions {
    clientUrl?: string;
    serverUrl?: string;
    serverHeaders?: Record<string, string>;
    pgWindowServerUrl?: string;
    gtid?: string;
    service?: string;
}
declare function TossPayments(clientKey: string, options?: TossPaymentsOptions): {
    readonly requestPayment: {
        (requestParams: CommonPaymentRequest): Promise<void>;
        (requestParams: CommonPaymentRequestWithoutUrl): Promise<RequestPaymentResult>;
        (method: "\uCE74\uB4DC" | "CARD", requestParams: CardPaymentRequest): Promise<void>;
        (method: "\uCE74\uB4DC" | "CARD", requestParams: CardPaymentRequestWithoutUrl): Promise<RequestPaymentResult>;
        (method: "\uAC00\uC0C1\uACC4\uC88C" | "VIRTUAL_ACCOUNT", requestParams: VirtualAccountPaymentRequest): Promise<void>;
        (method: "\uAC00\uC0C1\uACC4\uC88C" | "VIRTUAL_ACCOUNT", requestParams: VirtualAccountPaymentRequestWithoutUrl): Promise<RequestPaymentResult>;
        (method: "\uD734\uB300\uD3F0" | "MOBILE_PHONE", requestParams: PhonePaymentRequest): Promise<void>;
        (method: "\uD734\uB300\uD3F0" | "MOBILE_PHONE", requestParams: PhonePaymentRequestWithoutUrl): Promise<RequestPaymentResult>;
        (method: "\uACC4\uC88C\uC774\uCCB4" | "TRANSFER", requestParams: TranferPaymentRequest): Promise<void>;
        (method: "\uACC4\uC88C\uC774\uCCB4" | "TRANSFER", requestParams: TranferPaymentRequestWithoutUrl): Promise<RequestPaymentResult>;
        (method: "\uBB38\uD654\uC0C1\uD488\uAD8C" | "CULTURE_GIFT_CERTIFICATE", requestParams: CommonPaymentRequest): Promise<void>;
        (method: "\uBB38\uD654\uC0C1\uD488\uAD8C" | "CULTURE_GIFT_CERTIFICATE", requestParams: CommonPaymentRequestWithoutUrl): Promise<RequestPaymentResult>;
        (method: "\uAC8C\uC784\uBB38\uD654\uC0C1\uD488\uAD8C" | "GAME_GIFT_CERTIFICATE", requestParams: CommonPaymentRequest): Promise<void>;
        (method: "\uAC8C\uC784\uBB38\uD654\uC0C1\uD488\uAD8C" | "GAME_GIFT_CERTIFICATE", requestParams: CommonPaymentRequestWithoutUrl): Promise<RequestPaymentResult>;
        (method: "\uB3C4\uC11C\uBB38\uD654\uC0C1\uD488\uAD8C" | "BOOK_GIFT_CERTIFICATE", requestParams: CommonPaymentRequest): Promise<void>;
        (method: "\uB3C4\uC11C\uBB38\uD654\uC0C1\uD488\uAD8C" | "BOOK_GIFT_CERTIFICATE", requestParams: CommonPaymentRequestWithoutUrl): Promise<RequestPaymentResult>;
        (method: "\uD574\uC678\uAC04\uD3B8\uACB0\uC81C" | "FOREIGN_EASY_PAY", requestParams: ForeignEasyPayPaymentRequest): Promise<void>;
        (method: "\uD574\uC678\uAC04\uD3B8\uACB0\uC81C" | "FOREIGN_EASY_PAY", requestParams: ForeignEasyPayPaymentRequestWithoutUrl): Promise<RequestPaymentResult>;
        (method: PaymentMethodType | PaymentMethodCode, requestParams: PaymentRequest): Promise<void>;
        (method: PaymentMethodType | PaymentMethodCode, requestParams: PaymentRequestWithoutUrl): Promise<RequestPaymentResult>;
    };
    readonly requestBillingAuth: (method: "\uCE74\uB4DC", params: BillingAuthRequest) => Promise<import("./public-interfaces").PaymentSuccessParams | undefined>;
    readonly cancelPayment: typeof cancelPayment;
};
declare namespace TossPayments {
    var __versionHash__: any;
    var version: string;
}
export type TossPaymentsConstructor = typeof TossPayments;
export type TossPaymentsInstance = ReturnType<TossPaymentsConstructor>;
declare global {
    interface Window {
        TossPayments?: TossPaymentsConstructor;
    }
}
export default TossPayments;
